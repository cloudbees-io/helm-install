apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: 'Helm chart install'
description: 'Using helm to install a chart'
inputs:
  release-name:
    description: 'Helm release name'
    required: true
  namespace:
    description: 'Kubernetes namespace to install the chart in, created if missing'
    default: default
  version:
    description: 'Version of the chart to be installed'
  # DEPRECATED: values-file is deprecated, use values-files instead
  values-file:
    description: 'Path to a values file relative to the workspace'
  values-files:
    description: 'List of values files relative to the workspace separated by newline'
  values:
    description: 'An inline YAML representation of a values file passed to the Helm command'
  timeout:
    description: 'Helm chart installation timeout'
    default: 5m
  chart-location:
    description: >
      Helm chart location, can be a URL, a local chart archive,
      chart repo alias/chart name or an unpacked chart directory
    required: true
  max-history:
    description: 'MaxHistory limits the maximum number of revisions saved per release'
    default: '10'
  debug:
    description: 'Execute the helm command in debug mode'
    default: 'false'
  dependency-build:
    description: 'Build dependencies based on the contents of Chart.lock file'
    default: 'false'
  env-vars-file:
    description: >
      An optional file with key value pairs of the format 'export key=value'
      to export in the environment before execution of the helm commands.
  wait:
    description: 'enables waiting for deployments to stabilize'
    default: 'true'
  dry-run:
    description: 'Simulate an upgrade, without actually doing it'
    default: 'false'
  registry-configuration:
    description: >
      CloudBees registry configuration file containing the registries to use for loading images.
      By default it uses the file containing the registries configured under 'Integrations' in the CloudBees platform.
    default: ${{ cloudbees.registries }}
runs:
  using: composite
  steps:
    - id: helm-install
      name: Install a Helm chart
      uses: docker://public.ecr.aws/l7o7z1g8/actions/helm-install-action:${{ action.scm.sha }}
      run: |
        set -uo pipefail

        resolved_registries="/tmp/resolved_registries.out"

        if echo "${CHART_LOCATION}" | grep -q '^oci://'; then
          if [ "${CLOUDBEES_REGISTRIES_CONFIG}" ]; then
            chart_location=$(echo -n "${CHART_LOCATION}" | sed 's|^oci://||')
            registry-config --config "${CLOUDBEES_REGISTRIES_CONFIG}" resolve "${chart_location}" ${resolved_registries}
            echo "Resolved registries: $(cat ${resolved_registries})"
          fi
        fi

        if [ "$ENV_FILE" ]; then
          source "$ENV_FILE"
        fi

        printf %s "$VALUES_INLINE" > /tmp/inline-values.yaml
        yq eval /tmp/inline-values.yaml >/dev/null || (
          echo Dumping interpolated inline-values.yaml: >&2
          cat -n /tmp/inline-values.yaml >&2
        cat - >&2 <<-EOF
        
        ERROR: Malformed YAML provided with the values input!
               Please note that expression interpolation may result in malformed YAML.
               This depends on the contents of the vars/secrets you are using.
               To prevent these kinds of errors from happening, please escape values using the toJSON function.
               Example:
                 values: |
                   password: ${{ '\${{ toJSON(secrets.mypassword) }}' }}
        EOF
          false
        )

        if [ "$VALUES_FILE" ]; then
          cp "$VALUES_FILE" /tmp/values.yaml
        else
          touch /tmp/values.yaml
        fi

        # Skaffold is used as helm wrapper here to log more detailed information in case of a rollout failure.
        # See https://skaffold.dev/docs/status-check/
        export TIMEOUT_SECONDS="$(duration2seconds "$TIMEOUT")"
        mkdir /tmp/skaffold
        cat - >/tmp/skaffold/skaffold.yaml <<-EOF
          apiVersion: skaffold/v4beta10
          kind: Config
          metadata:
            name: data
          deploy:
            statusCheck: ${{ inputs.wait }}
            statusCheckDeadlineSeconds: 90
            tolerateFailuresUntilDeadline: true
            helm:
              releases:
              - valuesFiles:
                - /tmp/values.yaml
                createNamespace: true
                skipBuildDependencies: true
                upgradeOnChange: true
              flags:
                install:
                - "--timeout"
                - "5m"
                upgrade:
                - "--timeout"
                - "5m"
        EOF
        yq -i '.
          | .deploy.helm.releases[0].name = env(RELEASE_NAME)
          | .deploy.helm.flags.install[1] = env(TIMEOUT)
          | .deploy.helm.flags.upgrade[1] = env(TIMEOUT)
          | .deploy.helm.releases[0].skipBuildDependencies = env(BUILD_DEPENDENCIES) != "true"
          | .deploy.statusCheckDeadlineSeconds = env(TIMEOUT_SECONDS)
          ' /tmp/skaffold/skaffold.yaml

        if [ -s "${resolved_registries}" ]; then
          findChartInMirrors() {
            while IFS= read -r chart_location
            do
              chart_location=oci://$(echo "$chart_location" | awk -F':' '{print $1}') # strip the tag
              echo "Verifying chart location: $chart_location by running helm show"
              if helm show chart "$chart_location" --version "$CHART_VERSION"; then
                echo "Setting chart location to $chart_location"
                export CHART_LOCATION="$chart_location"
                return 0
              fi
            done < "${resolved_registries}"

            echo "Failed to find chart in any of the configured registry mirrors" >&2
            exit 1
          }

          findChartInMirrors
        fi

        if echo "$CHART_LOCATION" | grep -q '^oci://'; then # remote chart
          yq -i '.
            | .deploy.helm.releases[0].remoteChart = env(CHART_LOCATION)
            | .deploy.helm.releases[0].version = env(CHART_VERSION)
            ' /tmp/skaffold/skaffold.yaml
        else # local chart
          echo "Resolving local chart path: $CHART_LOCATION"
          export CHART_PATH="$(realpath "$CHART_LOCATION")"
          yq -i '.deploy.helm.releases[0].chartPath = env(CHART_PATH)' /tmp/skaffold/skaffold.yaml
        fi

        value_files_arg=""

        if [ "$VALUES_FILES" ]; then
          readarray -t value_files <<< "$VALUES_FILES"
          INDEX=0
          for f in "${value_files[@]}" 
          do 
            if [ "$f" ]; then
              echo "Looking for values file: ${f}"
              cp "$f" "/tmp/value_file_${INDEX}.yaml"
              value_files_arg="${value_files_arg} --values /tmp/value_file_${INDEX}.yaml"
              let INDEX=${INDEX}+1
              export VALUES_FILE="$(realpath "$f")"
              yq -i '.deploy.helm.releases[0].valuesFiles += env(VALUES_FILE)' /tmp/skaffold/skaffold.yaml
            fi
          done
        fi

        yq -i '.deploy.helm.releases[0].valuesFiles += "/tmp/inline-values.yaml"' /tmp/skaffold/skaffold.yaml

        echo "Installing helm release $RELEASE_NAME from chart location $CHART_LOCATION into namespace $HELM_NAMESPACE"
        if [ "${{ inputs.dry-run == 'true' }}" = true ]; then
          # Run helm in dry-run mode
          helm upgrade --install "$RELEASE_NAME" "$CHART_LOCATION" \
            --version "$CHART_VERSION" \
            --values /tmp/values.yaml \
            ${value_files_arg} \
            --values /tmp/inline-values.yaml \
            --create-namespace \
            --timeout "$TIMEOUT" \
            --dry-run
        else
          # Let skaffold deploy the chart to log details on failure
          cd /tmp/skaffold
          skaffold config set collect-metrics false
          skaffold deploy
          deployment_status=$?
          if [ ${{ inputs.wait }} = "false" ]; then
            echo "WARN: the 'wait' input parameter is disabled. The action is not waiting for the deployment to complete. Artifact information will not be sent to the CBP Platform as the deployment status cannot be verified."
          fi
        
          if [ $deployment_status -eq 0 ] && [ ${{ inputs.wait }} = "true" ]; then
            skaffold render > rendered.yaml

            container_images=""
            if yq -e '.spec.template.spec.containers[]?.image' "rendered.yaml" > /dev/null 2>&1; then
              # Extract the unique container images from the rendered chart
              container_images=$(yq '.spec.template.spec.containers[]?.image' "rendered.yaml" | sort -u)
            fi
            init_container_images=""
            if yq -e '.spec.template.spec.initContainers[]?.image' "rendered.yaml" > /dev/null 2>&1; then
              # Extract unique init container images
              init_container_images=$(yq '.spec.template.spec.initContainers[]?.image' "rendered.yaml" | sort -u)
            fi
            # Combine both lists of images, ensuring uniqueness
            all_images=$(echo -e "$container_images\n$init_container_images" | sort -u)

            url=""
            sha256_digest=""
            chart_name=""
            chart_version=""
            tmp_dir=$(mktemp -d)
            if [[ "$CHART_LOCATION" =~ ^oci:// ]]; then
              # OCI image format
              helm_pull_output=$(helm pull "$CHART_LOCATION" --destination "$tmp_dir" 2>&1)
              sha256_digest=$(echo "$helm_pull_output" | grep 'Digest:' | sed 's/Digest: //' || echo "" )
              chart_yaml="$tmp_dir/Chart.yaml"
              helm show chart "$CHART_LOCATION" > "$chart_yaml"
              if [ -f "$chart_yaml" ]; then
                chart_name=$(yq '.name' "$chart_yaml")
                chart_version=$(yq '.version' "$chart_yaml")
                url="$CHART_LOCATION:$chart_version"
              else 
                echo "WARN: failed to retrieve chart information from $CHART_LOCATION"
              fi
            else
              # Handle non-OCI images
              artifactPath=""
              if [ -f "$CHART_PATH" ] && [[ "$CHART_PATH" == *.tgz ]]; then
                artifactPath="$CHART_PATH"
              else
                if helm package $CHART_PATH --destination "$tmp_dir" > /dev/null 2>&1; then
                  artifactPath=$(ls -Art "$tmp_dir"/*.tgz | tail -n 1)
                fi
              fi
              if [ -f "$artifactPath" ]; then
                sha256_digest="sha256:$(sha256sum "$artifactPath" | awk '{print $1}')"
              fi

              # Extract chart information from the non-OCI chart (local directory or archive)
              chart_yaml="$tmp_dir/Chart.yaml"
              helm show chart "$CHART_PATH" > "$chart_yaml"
              if [ -f "$chart_yaml" ]; then
                chart_name=$(yq '.name' $chart_yaml)
                chart_version=$(yq '.version' $chart_yaml)
                url="$chart_name:$chart_version"
              else
                echo "WARN: failed to retrieve chart information from $CHART_LOCATION"
              fi
            fi  
            rm -rf "$tmp_dir"

            echo "Saving artifact information for chart $CHART_LOCATION"

            # Save the chart artifact information
            payload="{
                \"runId\": \"$CLOUDBEES_RUN_ID\",
                \"runAttempt\": \"$CLOUDBEES_RUN_ATTEMPT\",
                \"digest\": \"$sha256_digest\",
                \"name\": \"$chart_name\",
                \"url\": \"$url\",
                \"operation\": \"DEPLOYED\",
                \"version\": \"$chart_version\",
                \"type\": \"helm\"
            }"

            # if [ "$HELM_DEBUG" = "true" ]; then
              echo "DEBUG: Payload to be sent to artifact info API:"
              echo "$payload"
            # fi
            response=$(curl --fail-with-body -s -X 'POST' "$CLOUDBEES_API_URL/v2/workflows/runs/artifactinfos" \
              -d "$payload" \
              -H "Authorization: Bearer $CLOUDBEES_API_TOKEN" \
              -H 'Content-Type: application/json') || command_failed=1

            # Check if the command failed
            if [ ${command_failed:-0} -eq 1 ]; then
              echo "WARN: failed to save artifact information: '$response'"
            fi

            # Save the artifact information for each image
            for info in $all_images; do 
              echo "Saving artifact information for image $info"
              image_name=$(echo "$info" | sed 's/:.*//')
              image_version=$(echo "$info" | sed 's/.*://')
              sha256_digest=$(kubectl get pods -n "$HELM_NAMESPACE" -o yaml | \
                     yq ".items[].status.containerStatuses[] | select(.image == \"$info\") | .imageID" - | \
                     awk -F'@' '{print $2}' | sed 's/"//g' | head -n 1)
              echo "DEBUG: Image $info has digest $sha256_digest"
              payload="{
                \"runId\": \"$CLOUDBEES_RUN_ID\",
                \"runAttempt\": \"$CLOUDBEES_RUN_ATTEMPT\",
                \"name\": \"$image_name\",
                \"url\": \"$info\",
                \"digest\": \"$sha256_digest\",
                \"operation\": \"DEPLOYED\",
                \"version\": \"$image_version\",
                \"type\": \"docker\"
              }"

              # if [ "$HELM_DEBUG" = "true" ]; then
                echo "DEBUG: Payload to be sent to artifact info API:"
                echo "$payload"
              # fi

              response=$(curl --fail-with-body -s -X 'POST' "$CLOUDBEES_API_URL/v2/workflows/runs/artifactinfos" \
                -d "$payload" \
                -H "Authorization: Bearer $CLOUDBEES_API_TOKEN" \
                -H 'Content-Type: application/json') || command_failed=1
  
              # Check if the command failed
              if [ ${command_failed:-0} -eq 1 ]; then
                echo "WARN: failed to save artifact information: '$response'"
              fi
            done
          fi
        fi
      env:
        CHART_LOCATION: ${{ inputs.chart-location }}
        CHART_VERSION: ${{ inputs.version }}
        RELEASE_NAME: ${{ inputs.release-name }}
        VALUES_FILE: ${{ inputs.values-file }}
        VALUES_FILES: ${{ inputs.values-files }}
        VALUES_INLINE: ${{ inputs.values }}
        ENV_FILE: ${{ inputs.env-vars-file }}
        BUILD_DEPENDENCIES: ${{ inputs.dependency-build }}
        TIMEOUT: ${{ inputs.timeout }}
        HELM_NAMESPACE: ${{ inputs.namespace }}
        HELM_MAX_HISTORY: ${{ inputs.max-history }}
        HELM_DEBUG: ${{ inputs.debug == 'true' && 'true' || 'false' }}
        CLOUDBEES_REGISTRIES_CONFIG: ${{ inputs.registry-configuration }}
        CLOUDBEES_API_URL: ${{ cloudbees.api.url }}
        CLOUDBEES_API_TOKEN: ${{ cloudbees.api.token }}
        CLOUDBEES_RUN_ID: ${{ cloudbees.run_id }}
        CLOUDBEES_RUN_ATTEMPT: ${{ cloudbees.run_attempt }}
